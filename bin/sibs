#!/usr/bin/perl
use strict;
use warnings;
use Fcntl ':flock';
use URI;

our @DEFAULT_EXCLUDE = qw( .cache .cpanm .gvfs Downloads Dropbox Trash );
our $HOME = $ENV{HOME} || 'ENVIRONMENT_HOME_IS_NOT_SET';

sub run_rsync {
  my $self = shift;
  my $uri = $self->{destination};
  my @options = qw( -az --delete-after --numeric-ids --relative );

  push @options, map { qq(--exclude=$_) } @{ $self->{exclude} || [] };
  push @options, '--verbose' if $ENV{VERBOSE};
  push @options, @{ $self->{source} };
  push @options, sprintf '%s@%s:%s/incoming', $uri->userinfo, $self->remote_host, $uri->path;

  $self->_system(rsync => @options);
}

sub create_sibs_config {
  my $self = shift;
  my $tmp = sprintf '%s.tmp', $self->{config};

  open my $CONFIG, '>', $tmp or die "Cannot write $tmp: $!\n";
  local $_;
  warn $@ || "--- Creating '$self->{config}' from user input...\n";

  print $CONFIG "{\n";
  printf $CONFIG "  email => '%s',\n", $_ if $self->_read('email');
  printf $CONFIG "  exclude => [qw( %s )],\n", $_ if $self->_read('exclude');
  printf $CONFIG "  source => [qw( %s )],\n", $_ if $self->_read('source');
  printf $CONFIG "  destination => '%s',\n", $_ if $self->_read('destination');
  print $CONFIG "}\n";

  close $CONFIG or die "Could not write '$tmp': $!\n";
  rename $tmp, $self->{config} or die "Could not write '$self->{config}: $!'\n";
}

sub add_backup_host_to_ssh_config {
  my $self = shift;
  my $moniker = $self->remote_host;
  my $file = $self->ssh_file('config');

  if(-r $file) {
    open my $CONFIG, '<', $file or die "Could not open $file: $!";
    while(<$CONFIG>) {
      next unless /Host\s+$moniker/;
      warn "--- Host $moniker exists in $file.\n";
      return 1;
    }
  }

  warn "--- Adding $moniker to $file\n";
  open my $CONFIG, '>>', $file or die "Cannot write to $file: $!";
  printf $CONFIG "\nHost %s\n", $self->remote_host;
  printf $CONFIG "  Hostname %s\n", $self->{destination}->host;
  printf $CONFIG "  IdentityFile %s\n", $self->ssh_file('sibs_dsa');
  close $CONFIG;
}

sub create_identity_file {
  my $self = shift;
  my $file = $self->ssh_file('sibs_dsa');
  my $identity;

  if(-r $file) {
    warn "--- Identity file '$file' exists\n";
  }
  else {
    warn "--- Creating $file with empty password using ssh-keygen ...\n";
    $self->_system('ssh-keygen' => -P => '', -t => 'dsa', -f => $file);
  }

  warn "--- Copying pub key to remote host ...\n";
  open my $IDENTITY, '<', "$file.pub" or die "Cannot read $file.pub: $!";
  $self->run_sibs_remote(sub { readline $IDENTITY }, 'remote-init');
}

sub remote_add_pub_key {
  my($self, $key) = @_;
  my $file = $self->ssh_file('authorized_keys');

  if(-r $file) {
    my $match = quotemeta $key;
    open my $AUTHORIZED_KEYS, '<', $file or die "Could not open $file: $!";
    while(<$AUTHORIZED_KEYS>) {
      next unless /$match/;
      warn "--- Remote authorized_keys contains pub key\n";
      return 0;
    }
  }

  open my $AUTHORIZED_KEYS, '>>', $file or die "Could not append to $file: $!\n";
  print $AUTHORIZED_KEYS $key;
  print $AUTHORIZED_KEYS "\n" unless $key =~ /\n$/;
  close $AUTHORIZED_KEYS;
  warn "--- Pub key added to remote authorized_keys.\n";
  return 1;
}

sub remote_host {
  my $self = shift;
  my $moniker = 'sibs-' .$self->{destination}->host;

  $moniker =~ s/\./-/g;
  $moniker;
}

sub load_config {
  my $self = shift;
  my $config;

  open my $CONFIG, '<', $self->{config} or die "Cannot read $self->{config}: $! Run '$0 setup'\n";
  $config = join '', <$CONFIG>;
  $config = eval <<"  CONFIG";
    use strict;
    use warnings;
    use File::Basename;
    $config
  CONFIG

  $config or die "Invalid config file: ($@)\n";
  $config->{exclude} ||= [ @DEFAULT_EXCLUDE ];
  $config->{source} ||= [ $HOME ];
  $config->{destination} = URI->new($config->{destination} || '');

  @{$self}{keys %$config} = values %$config;

  for my $m (qw( scheme host path userinfo )) {
    next if $config->{destination}->$m;
    die "[$self->{config}] Missing '$m' part for 'destination' URI\n";
  }

  $config->{destination}->scheme eq 'rsync' or die "[$self->{config}] Only rsync:// is supported for 'destination' URI\n";
}

sub run_sibs_remote {
  my($self, @args) = @_;
  my $stdin = ref $args[0] eq 'CODE' ? shift @args : sub { '' };
  my @remote = (
    ssh => sprintf('%s@%s', $self->{destination}->userinfo, $self->remote_host),
    qq(perl - @args),
  );

  open my $SSH, '|-', @remote or die "Cannot start 'sibs @args' remote: $!";
  open my $SELF, '<', __FILE__ or die "Cannot read $0: $!";
  print $SSH $_ while <$SELF>;
  print $SSH "\n__DATA__\n";
  print $SSH $self->$stdin;
  close $SSH; # TODO: do i need to wait?
}

sub ssh_file {
  my($self, $file) = @_;
  return "$HOME/.ssh" unless $file;
  return "$HOME/.ssh/$file";
}

sub _read {
  my($self, $k) = @_;
  my $v = $self->{$k};
  $v = join ' ', @$v if ref $v eq 'ARRAY';
  local $| = 1;
  print $k;
  printf " ($v)", if $v;
  print ": ";
  $_ = <STDIN>;
  chomp;
  $_ ||= $v;
}

sub _system {
  my($self, $program, @options) = @_;

  for my $path (qw( /bin /usr/bin /usr/local/bin )) {
    next unless -x "$path/$program";
    $program = "$path/$program";
    last;
  }

  warn "--- $program @options\n";
  system $program => @options;
}

sub run {
  my $self = shift;
  my $action = shift || 'help';
  my $rsync;

  $self->{config} ||= "$HOME/.sibs.conf";

  if($action eq 'setup') {
    $self->create_sibs_config until eval { $self->load_config };
    warn "--- Created $self->{config}\n";
    mkdir $self->ssh_file or die "Could not mkdir ~/.ssh: $!" unless -d $self->ssh_file;
    chmod 0700, $self->ssh_file;
    $self->add_backup_host_to_ssh_config;
    $self->create_identity_file;
  }
  elsif($action eq 'backup') {
    $self->load_config;
    $self->run_rsync;
    $self->run_sibs_remote('remote-archive', $self->{destination}->path);
  }
  elsif($action eq 'man') {
    exec perldoc => 'App::sibs';
  }
  elsif($action eq 'remote-init') {
    $self->remote_add_pub_key(eval 'do { local $/; <DATA> }');
  }
  elsif($action eq 'remote-archive') {
    my $dir = shift @_;
    my $hour = (localtime)[2];
    my $mday = (localtime)[3];
    chdir $dir or die "Cannot chdir $dir: $!\n";
    $self->_system(cp => "-al" => "incoming" => "$mday-$hour");
  }
  else {
    print <<'    HELP';
    sibs man
    sibs setup
    sibs backup
    HELP
  }

  return 0;
}

exit +(bless {})->run(@ARGV) unless defined wantarray;
bless {};
